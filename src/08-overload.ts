function parseString(input: string | string[]): string | string[] {

  if (Array.isArray(input)) {
    return input.join('');
  } else {
    return input.split('');
  }

}

const rtaArray = parseString('Elias');
console.log('rtaArray:', rtaArray);
rtaArray.reverse();
if (Array.isArray(rtaArray)) {
  rtaArray.reverse();
}

const string = parseString(['e', 'l', 'i', 'a', 's']);
console.log('string:', string);
string.toLowerCase();
if (typeof string === 'string') {
  string.toLowerCase()
}

/**
 * Con la sobrecarga de funciones definimos diferentes firmas de una funci√≥n en la que cada firma puede manejar cierto tipado de entrada y salida. TypeScript decidir√° de manera autom√°tica qu√© firma es la correcta para usar bas√°ndose en los argumentos enviados y el tipo de datos de estos.

Un problema que puede resolver la sobrecarga de funciones
Imaginemos que deseamos implementar una funci√≥n que devuelva un string en el caso de que le env√≠es un array o que devuelva un array en caso de que le mandes un string como argumento:

// 1Ô∏è‚É£Si le enviamos un array, nos debe unir cada elemento del array y devolver un string.
// 2Ô∏è‚É£Si le enviamos un string, nos debe separar cada caracter y formar un array como respuesta.
// [N,i,c,o] => 'Nico' ... string[] => string 1Ô∏è‚É£
//  'Nico' => [N,i,c,o] ... string => string[] 2Ô∏è‚É£


function parseStr(input: string | string[]): string | string[] {
  if (Array.isArray(input)) {
    return input.join(''); // string
  } else {
    return input.split(''); // string[]
  }
}

// Llamando a la funci√≥n...
const rptaArray = parseStr('Nico'); // Entrada: string - Salida: Array
console.log('rptaArray', 'Nico =>' ,rptaArray);

const rptaStr = parseStr(['N','i','c','o']); // Entrada: array - Salida: string
console.log('rptaStr', "['N','i','c','o'] =>",rptaStr); 
Definimos la funci√≥n con un par√°metro que puede ser del tipo string o string[] (un array que contiene valores de tipo string) y un retorno que puede ser de igual manera string o string[].

Cuando invocamos la funci√≥n para enviar los argumentos que deseamos probar, TypeScript no sabe inicialmente qu√© tipo de dato le est√°s mandando de manera espec√≠fica en el c√≥digo. Por tanto, no podemos acceder en la siguiente l√≠nea de c√≥digo a ning√∫n m√©todo propio de un string o un array:

const rptaArray = parseStr('Nico'); // Entrada: string - Salida: Array
// La salida y por tanto el valor que es asignado a `rptaArray` ser√° un Array.
// Si intentamos aplicar un m√©todo propio de los Arrays:
rptaArray.reverse(); // ‚õî ...Nos marcar√° error üëÄ

const rptaStr = parseStr(['N','i','c','o']); // Entrada: array - Salida: string
// La salida y por tanto el valor que es asignado a `rptaStr` ser√° un string.
// Si intentamos aplicar un m√©todo propio de los strings:
rptaStr.toLowerCase(); // ‚õî ...Nos marcar√° error üëÄ
Soluci√≥n con validaci√≥n de tipos
Una posible soluci√≥n es realizar una peque√±a validaci√≥n de tipos previo a querer ejecutar alg√∫n m√©todo propio del tipo de dato correspondiente:

const rptaArray = parseStr('Nico');
// rtaArray.reverse(); ‚õî NO directamente
if (Array.isArray(rtaArray)) { //‚úÖ Validaci√≥n de tipos previamente...
  rtaArray.reverse(); // üëç Ahora s√≠ nos permite utilizar este m√©todo de los arrays.
}
console.log('rtaArray', 'Nico =>' ,rtaArray); // Vemos en consola


const rtaStr = parseStr(['N','i','c','o']);
// rtaStr.toLowerCase(); ‚õî NO directamente
if (typeof rtaStr === 'string') { //‚úÖ Validaci√≥n de tipos previamente...
  rtaStr.toLowerCase(); // üëç Ahora s√≠ nos permite utilizar este m√©todo de los strings.
}
console.log('rtaStr', "['N','i','c','o'] =>",rtaStr); // Vemos en consola
Soluci√≥n con sobrecarga de funciones
Para resolver este problema con sobrecarga de funciones debemos declarar 2 firmas adicionales con el mismo nombre de la funci√≥n: una firma manejar√° el tipado de entrada/salida como string/string[] y la otra forma de manera viceversa, es decir string[]/string. El par√°metro de la funci√≥n que tendr√° la l√≥gica puede manejar el tipado unknown, pues ya estamos dejando declarado previamente los tipados de entrada y salida que manejar√° la funci√≥n:

// SOBRECARGAS:
function parseStr(input: string): string[]; // Entrada: string - Salida: string[]
function parseStr(input: string[]): string; // Entrada: string[] - Salida: string

// Funci√≥n principal con las instrucciones deseadas y a la que se le aplicar√°n las sobrecargas:
function parseStr(input: unknown): unknown {
}
Ahora en la funci√≥n principal haremos una validaci√≥n de tipos y seg√∫n ello retornaremos las respuestas respectivas a lo que se busca como output:

// SOBRECARGAS:
function parseStr(input: string): string[]; // Entrada: string - Salida: string[]
function parseStr(input: string[]): string; // Entrada: string[] - Salida: string

// Funci√≥n principal y a la que se le aplicar√°n las sobrecargas:
function parseStr(input: unknown): unknown {
    if (Array.isArray(input)) {
        return input.join(''); // string
    } else {
        return input.split(''); // string[]
    }
}
Finalmente, ya podr√≠amos utilizar los m√©todos seg√∫n el tipo de dato de la respuesta obtenida de la funci√≥n:

// SOBRECARGAS:
function parseStr(input: string): string[]; // Entrada: string - Salida: string[]
function parseStr(input: string[]): string; // Entrada: string[] - Salida: string

// Funci√≥n principal y a la que se le aplicar√°n las sobrecargas:
function parseStr(input: unknown): unknown {
    if (Array.isArray(input)) {
        return input.join(''); // string
    } else {
        return input.split(''); // string[]
    }
}

const rtaArray = parseStr('Nico'); // Salida: array
rtaArray.reverse(); // ‚úÖ Ya podemos acceder a los m√©todos de un array 
console.log('rtaArray', 'Nico =>' ,rtaArray);

const rtaStr = parseStr(['N','i','c','o']); // Salida: string
rtaStr.toLowerCase(); // ‚úÖ Ya podemos acceder a los m√©todos de un string 
console.log('rtaStr', "['N','i','c','o'] =>",rtaStr);

Les comparto mis apuntes. :D

Problema con el retorno de funciones
Cuando tenemos una funci√≥n que retorna m√°s de un solo tipo de dato y a ese resultado lo queremos utilizar en otra parte de nuestro programa, no vamos a poder usarlo como tal, ya que TypeScript no sabe que tipo de dato se retorn√≥ realmente.

TypeScript al no saber el tipo de dato que se retorn√≥ en una funci√≥n que puede retornar m√°s de un tipo de dato, somos nosotros los responsables en decirle el tipo de dato resultante de la funci√≥n para as√≠ poder operar con el resultado de forma normal.

Uso de la sobrecarga de funciones
Se suele emplear mucho en librer√≠as, pero depende mucho de tu proyecto y de las ventajas que te puede llegar a dar.

La sobre carga de funciones √∫nicamente suelen darse con las funciones declarativas con la palabra reservada function.
 */